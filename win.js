const { execSync, spawn } = require('child_process')
const fs = require('fs')
const os = require('os')
const path = require('path')
const showMessageBox = require('./messageBox')

// ‚úÖ ÂºπÂá∫ÈùûÈòªÂ°ûÊèêÁ§∫Ê°ÜÔºàÂπ∂ËøîÂõû PID Êñπ‰æøÂÖ≥Èó≠Ôºâ
function showDownloadPopup(title = 'Outlook Bridge') {
	const psScript = `
Add-Type -AssemblyName System.Windows.Forms
[System.Windows.Forms.Application]::EnableVisualStyles()
$form = New-Object System.Windows.Forms.Form
$form.Text = '${title}'
$form.Width = 300
$form.Height = 100
$form.StartPosition = 'CenterScreen'
$form.TopMost = $true

$label = New-Object System.Windows.Forms.Label
$label.Text = 'Ê≠£Âú®‰∏ãËΩΩÈôÑ‰ª∂ÔºåËØ∑Á®çÂÄô...'
$label.Dock = 'Fill'
$label.TextAlign = 'MiddleCenter'
$form.Controls.Add($label)

$form.ShowDialog()
`

	const tmpPath = path.join(os.tmpdir(), 'popup.ps1')
	fs.writeFileSync(tmpPath, psScript, 'utf8')

	return spawn(
		'powershell',
		['-NoProfile', '-WindowStyle', 'Normal', '-File', tmpPath],
		{
			detached: true,
			stdio: 'ignore',
		}
	)
}

/**
 * Ê£ÄÊµã Outlook ÂÆâË£ÖË∑ØÂæÑ
 * @returns {string|null} Outlook.exe ÁöÑÂÆåÊï¥Ë∑ØÂæÑÔºåÂ¶ÇÊûúÊú™ÊâæÂà∞ÂàôËøîÂõû null
 */
function detectOutlookExePath() {
	// ÊâÄÊúâÂèØËÉΩÁöÑ Office ÁâàÊú¨
	const officeVersions = [
		{ reg: '16.0', dir: 'Office16' }, // Office 2016/2019/365
		{ reg: '15.0', dir: 'Office15' }, // Office 2013
		{ reg: '14.0', dir: 'Office14' }, // Office 2010
		{ reg: '12.0', dir: 'Office12' }, // Office 2007
	]

	// ÊâÄÊúâÂèØËÉΩÁöÑÂÆâË£ÖÂü∫Á°ÄË∑ØÂæÑ
	const basePaths = [
		'C:\\Program Files\\Microsoft Office',
		'C:\\Program Files (x86)\\Microsoft Office',
		process.env.LOCALAPPDATA + '\\Microsoft\\Office', // Áî®Êà∑ÂÆâË£ÖË∑ØÂæÑ
		process.env.ProgramW6432 + '\\Microsoft Office', // 64‰ΩçÁ≥ªÁªüÁöÑÁ®ãÂ∫èË∑ØÂæÑ
		process.env['ProgramFiles(x86)'] + '\\Microsoft Office', // 32‰ΩçË∑ØÂæÑ
	].filter(Boolean) // ËøáÊª§ÊéâÂèØËÉΩÁöÑundefinedË∑ØÂæÑ

	// ÂèØËÉΩÁöÑÂ≠êË∑ØÂæÑÊ®°Âºè
	const subPaths = [
		'root\\{dir}', // Click-to-Run ÂÆâË£Ö
		'{dir}', // ‰º†ÁªüÂÆâË£Ö
		'{reg}\\Outlook', // Áî®Êà∑ÂÆâË£ÖË∑ØÂæÑ
	]

	const exeName = 'OUTLOOK.EXE'

	// Ê£ÄÊü•ÊâÄÊúâÂèØËÉΩÁöÑÁªÑÂêà
	for (const base of basePaths) {
		for (const { dir, reg } of officeVersions) {
			for (const sub of subPaths) {
				const template = sub.replace('{dir}', dir).replace('{reg}', reg)

				const fullPath = path.join(base, template, exeName)

				try {
					if (fs.existsSync(fullPath)) {
						return fullPath
					}
				} catch (err) {
					console.debug(`Ê£ÄÊü•Ë∑ØÂæÑ ${fullPath} Â§±Ë¥•: ${err.message}`)
				}
			}
		}
	}

	return null
}

function createOutlookMailWindows({ to, subject, body, attachments = [] }) {
	console.log('üß™ Ê≠£Âú®Ë∞ÉÁî® createOutlookMailWindows')

	const tempDir = path.join(os.tmpdir(), 'outlookbridge_attachments')
	if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir, { recursive: true })

	let popup = null

	try {
		const outlookPath = detectOutlookExePath()
		if (!outlookPath) throw new Error('Êú™ÊâæÂà∞ Outlook ÂÆâË£ÖË∑ØÂæÑ')
		// ‚úÖ Â§öÈôÑ‰ª∂Ëµ∞ COM ÊñπÂºè
		if (attachments.length > 1) {
			popup = showDownloadPopup()

			const downloadStatements = attachments
				.map((url, i) => {
					const filename = `file_${i}_${Date.now()}.${
						url.split('.').pop().split('?')[0] || 'tmp'
					}`
					const fullPath = path.join(tempDir, filename).replace(/\\/g, '\\\\')
					return `
          $wc = New-Object System.Net.WebClient
          $wc.DownloadFile("${url}", "${fullPath}")
          $mail.Attachments.Add("${fullPath}")
        `
				})
				.join('\n')

			const psScript = `
        $outlook = New-Object -ComObject Outlook.Application
        $mail = $outlook.CreateItem(0)
        $mail.To = ${JSON.stringify(to)}
        $mail.Subject = ${JSON.stringify(subject)}
        $mail.HTMLBody = ${JSON.stringify(body)}

        ${downloadStatements}

        $mail.Display()

        $shell = New-Object -ComObject WScript.Shell
        for ($i = 0; $i -lt 10; $i++) {
          Start-Sleep -Milliseconds 500
          if ($shell.AppActivate("Outlook")) { break }
        }
      `.trim()

			const encoded = Buffer.from(psScript, 'utf16le').toString('base64')
			execSync(
				`powershell -WindowStyle Hidden -NoProfile -EncodedCommand ${encoded}`,
				{
					stdio: 'ignore',
					windowsHide: true,
				}
			)

			if (popup) popup.kill()
			return
		}

		// ‚úÖ ÂçïÈôÑ‰ª∂ÊàñÊó†ÈôÑ‰ª∂Ôºå‰ΩøÁî® outlook.exe ÂêØÂä®
		let downloadedFilePath = null
		if (attachments.length === 1) {
			popup = showDownloadPopup()

			const url = attachments[0]
			const ext = url.split('.').pop().split('?')[0] || 'tmp'
			const filename = `file_${Date.now()}.${ext}`
			downloadedFilePath = path.join(tempDir, filename)
			execSync(
				`powershell -Command "(New-Object Net.WebClient).DownloadFile('${url}', '${downloadedFilePath.replace(
					/\\/g,
					'\\\\'
				)}')"`
			)
			if (popup) popup.kill()
		}

		// ‚úÖ ÊûÑÂª∫ mailto ÈìæÊé•
		const mailtoParams = [
			`to=${encodeURIComponent(to)}`,
			`subject=${encodeURIComponent(subject)}`,
			`body=${encodeURIComponent(body)}`,
		].join('&')
		const cmd = downloadedFilePath
			? `"${outlookPath}" /a "${downloadedFilePath}" /m "${to}?${mailtoParams}"`
			: `"${outlookPath}" /c ipm.note /m "mailto:${to}?${mailtoParams}"`

		execSync(cmd)
	} catch (err) {
		try {
			if (popup) popup.kill()
		} catch {}
		showMessageBox(`Ë∞ÉÁî® Outlook Âá∫ÈîôÔºö${err.message}`)
		console.error('‚ùå Ë∞ÉÁî® Outlook Âá∫Èîô:', err)
	}
}

module.exports = createOutlookMailWindows
